// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nextlag/gomart/internal/controllers (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/nextlag/gomart/internal/usecase"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUseCase) Do() *usecase.UseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(*usecase.UseCase)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUseCaseMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUseCase)(nil).Do))
}

// DoAuth mocks base method.
func (m *MockUseCase) DoAuth(arg0 context.Context, arg1, arg2 string, arg3 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAuth", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoAuth indicates an expected call of DoAuth.
func (mr *MockUseCaseMockRecorder) DoAuth(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAuth", reflect.TypeOf((*MockUseCase)(nil).DoAuth), arg0, arg1, arg2, arg3)
}

// DoDebit mocks base method.
func (m *MockUseCase) DoDebit(arg0 context.Context, arg1, arg2 string, arg3 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDebit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDebit indicates an expected call of DoDebit.
func (mr *MockUseCaseMockRecorder) DoDebit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDebit", reflect.TypeOf((*MockUseCase)(nil).DoDebit), arg0, arg1, arg2, arg3)
}

// DoGetBalance mocks base method.
func (m *MockUseCase) DoGetBalance(arg0 context.Context, arg1 string) (float32, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetBalance", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(float32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoGetBalance indicates an expected call of DoGetBalance.
func (mr *MockUseCaseMockRecorder) DoGetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetBalance", reflect.TypeOf((*MockUseCase)(nil).DoGetBalance), arg0, arg1)
}

// DoGetOrders mocks base method.
func (m *MockUseCase) DoGetOrders(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetOrders", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetOrders indicates an expected call of DoGetOrders.
func (mr *MockUseCaseMockRecorder) DoGetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetOrders", reflect.TypeOf((*MockUseCase)(nil).DoGetOrders), arg0, arg1)
}

// DoGetWithdrawals mocks base method.
func (m *MockUseCase) DoGetWithdrawals(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetWithdrawals indicates an expected call of DoGetWithdrawals.
func (mr *MockUseCaseMockRecorder) DoGetWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetWithdrawals", reflect.TypeOf((*MockUseCase)(nil).DoGetWithdrawals), arg0, arg1)
}

// DoInsertOrder mocks base method.
func (m *MockUseCase) DoInsertOrder(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInsertOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInsertOrder indicates an expected call of DoInsertOrder.
func (mr *MockUseCaseMockRecorder) DoInsertOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInsertOrder", reflect.TypeOf((*MockUseCase)(nil).DoInsertOrder), arg0, arg1, arg2)
}

// DoRegister mocks base method.
func (m *MockUseCase) DoRegister(arg0 context.Context, arg1, arg2 string, arg3 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRegister", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoRegister indicates an expected call of DoRegister.
func (mr *MockUseCaseMockRecorder) DoRegister(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRegister", reflect.TypeOf((*MockUseCase)(nil).DoRegister), arg0, arg1, arg2, arg3)
}
